//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OnlineAuction.Buisness.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class MainDataBase : DbContext
    {
        public MainDataBase()
            : base("name=MainDataBase")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Bet> Bets { get; set; }
        public DbSet<Bookmark> Bookmarks { get; set; }
        public DbSet<Category> Categories { get; set; }
        public DbSet<Comment> Comments { get; set; }
        public DbSet<Location> Locations { get; set; }
        public DbSet<Lot> Lots { get; set; }
        public DbSet<LotSubCategory> LotSubCategories { get; set; }
        public DbSet<LotType> LotTypes { get; set; }
        public DbSet<Role> Roles { get; set; }
        public DbSet<SubCategory> SubCategories { get; set; }
        public DbSet<UserData> UserDatas { get; set; }
        public DbSet<User> Users { get; set; }
        public DbSet<BetInfo> BetInfos { get; set; }
        public DbSet<BookmarkInfo> BookmarkInfos { get; set; }
        public DbSet<CommentInfo> CommentInfos { get; set; }
        public DbSet<LotByLocation> LotByLocations { get; set; }
        public DbSet<LotInfo> LotInfos { get; set; }
        public DbSet<LotShortPreview> LotShortPreviews { get; set; }
        public DbSet<LotUserInfo> LotUserInfos { get; set; }
        public DbSet<LotViewCount> LotViewCounts { get; set; }
        public DbSet<UserFullInfo> UserFullInfos { get; set; }
        public DbSet<UserLotCountInof> UserLotCountInofs { get; set; }
        public DbSet<UserRoleInfo> UserRoleInfos { get; set; }
        public DbSet<UserUnapprovedComment> UserUnapprovedComments { get; set; }
        public DbSet<ActiveUserInfo> ActiveUserInfos { get; set; }
        public DbSet<LotCategory> LotCategories { get; set; }
        public DbSet<BannedLot> BannedLots { get; set; }
        public DbSet<BannedUser> BannedUsers { get; set; }
    
        public virtual int AddBookmark(Nullable<int> userid, Nullable<int> lotid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var lotidParameter = lotid.HasValue ?
                new ObjectParameter("lotid", lotid) :
                new ObjectParameter("lotid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddBookmark", useridParameter, lotidParameter);
        }
    
        public virtual int AddNewLot(string lotName, string descr, Nullable<int> startCurrency, Nullable<System.DateTime> actualDate, Nullable<int> ownerId, Nullable<int> lotTypeId, ObjectParameter id)
        {
            var lotNameParameter = lotName != null ?
                new ObjectParameter("LotName", lotName) :
                new ObjectParameter("LotName", typeof(string));
    
            var descrParameter = descr != null ?
                new ObjectParameter("Descr", descr) :
                new ObjectParameter("Descr", typeof(string));
    
            var startCurrencyParameter = startCurrency.HasValue ?
                new ObjectParameter("StartCurrency", startCurrency) :
                new ObjectParameter("StartCurrency", typeof(int));
    
            var actualDateParameter = actualDate.HasValue ?
                new ObjectParameter("ActualDate", actualDate) :
                new ObjectParameter("ActualDate", typeof(System.DateTime));
    
            var ownerIdParameter = ownerId.HasValue ?
                new ObjectParameter("OwnerId", ownerId) :
                new ObjectParameter("OwnerId", typeof(int));
    
            var lotTypeIdParameter = lotTypeId.HasValue ?
                new ObjectParameter("LotTypeId", lotTypeId) :
                new ObjectParameter("LotTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNewLot", lotNameParameter, descrParameter, startCurrencyParameter, actualDateParameter, ownerIdParameter, lotTypeIdParameter, id);
        }
    
        public virtual int AddNewUser(string userName, string password, string passwordQuestion, string passwordAnswer, string email, Nullable<int> roleID, string phone, string firstName, string lastName, Nullable<System.DateTime> birthDate, string photoLink, Nullable<int> locationID)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var passwordQuestionParameter = passwordQuestion != null ?
                new ObjectParameter("PasswordQuestion", passwordQuestion) :
                new ObjectParameter("PasswordQuestion", typeof(string));
    
            var passwordAnswerParameter = passwordAnswer != null ?
                new ObjectParameter("PasswordAnswer", passwordAnswer) :
                new ObjectParameter("PasswordAnswer", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var birthDateParameter = birthDate.HasValue ?
                new ObjectParameter("BirthDate", birthDate) :
                new ObjectParameter("BirthDate", typeof(System.DateTime));
    
            var photoLinkParameter = photoLink != null ?
                new ObjectParameter("PhotoLink", photoLink) :
                new ObjectParameter("PhotoLink", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNewUser", userNameParameter, passwordParameter, passwordQuestionParameter, passwordAnswerParameter, emailParameter, roleIDParameter, phoneParameter, firstNameParameter, lastNameParameter, birthDateParameter, photoLinkParameter, locationIDParameter);
        }
    
        public virtual int AddSubCategoryToLot(Nullable<int> lotid, Nullable<int> subCategoryId)
        {
            var lotidParameter = lotid.HasValue ?
                new ObjectParameter("Lotid", lotid) :
                new ObjectParameter("Lotid", typeof(int));
    
            var subCategoryIdParameter = subCategoryId.HasValue ?
                new ObjectParameter("SubCategoryId", subCategoryId) :
                new ObjectParameter("SubCategoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddSubCategoryToLot", lotidParameter, subCategoryIdParameter);
        }
    
        public virtual int CursorCompleteLots()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CursorCompleteLots");
        }
    
        public virtual int CursorDeleteLotComments()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CursorDeleteLotComments");
        }
    
        public virtual int DeleteLot(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteLot", idParameter);
        }
    
        public virtual int DeleteUser(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUser", userIdParameter);
        }
    
        public virtual int GetAdministratorRoleId(ObjectParameter id)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAdministratorRoleId", id);
        }
    
        public virtual int GetBasicLotTypeId(ObjectParameter typeId)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetBasicLotTypeId", typeId);
        }
    
        public virtual int GetMaxBet(Nullable<int> id, ObjectParameter value)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetMaxBet", idParameter, value);
        }
    
        public virtual ObjectResult<BookmarkInfo> GetUserBookmarks(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BookmarkInfo>("GetUserBookmarks", idParameter);
        }
    
        public virtual ObjectResult<BookmarkInfo> GetUserBookmarks(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BookmarkInfo>("GetUserBookmarks", mergeOption, idParameter);
        }
    
        public virtual int GetUserIdByName(string name, ObjectParameter userId)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetUserIdByName", nameParameter, userId);
        }
    
        public virtual int LeaveComment(Nullable<int> userid, Nullable<int> lotid, string text)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var lotidParameter = lotid.HasValue ?
                new ObjectParameter("lotid", lotid) :
                new ObjectParameter("lotid", typeof(int));
    
            var textParameter = text != null ?
                new ObjectParameter("text", text) :
                new ObjectParameter("text", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LeaveComment", useridParameter, lotidParameter, textParameter);
        }
    
        public virtual int MakeBet(Nullable<int> userId, Nullable<int> lotId, Nullable<int> betValue, Nullable<System.DateTime> betDate)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var lotIdParameter = lotId.HasValue ?
                new ObjectParameter("LotId", lotId) :
                new ObjectParameter("LotId", typeof(int));
    
            var betValueParameter = betValue.HasValue ?
                new ObjectParameter("BetValue", betValue) :
                new ObjectParameter("BetValue", typeof(int));
    
            var betDateParameter = betDate.HasValue ?
                new ObjectParameter("BetDate", betDate) :
                new ObjectParameter("BetDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MakeBet", userIdParameter, lotIdParameter, betValueParameter, betDateParameter);
        }
    
        public virtual int MarkUserAsDeleted(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MarkUserAsDeleted", userIdParameter);
        }
    
        public virtual ObjectResult<Lot> SearchByLotName(string query)
        {
            var queryParameter = query != null ?
                new ObjectParameter("query", query) :
                new ObjectParameter("query", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Lot>("SearchByLotName", queryParameter);
        }
    
        public virtual ObjectResult<Lot> SearchByLotName(string query, MergeOption mergeOption)
        {
            var queryParameter = query != null ?
                new ObjectParameter("query", query) :
                new ObjectParameter("query", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Lot>("SearchByLotName", mergeOption, queryParameter);
        }
    
        public virtual ObjectResult<Lot> SearchLotByCategoryId(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Lot>("SearchLotByCategoryId", idParameter);
        }
    
        public virtual ObjectResult<Lot> SearchLotByCategoryId(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Lot>("SearchLotByCategoryId", mergeOption, idParameter);
        }
    
        public virtual ObjectResult<Lot> SearchLotBySubCategoryId(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Lot>("SearchLotBySubCategoryId", idParameter);
        }
    
        public virtual ObjectResult<Lot> SearchLotBySubCategoryId(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Lot>("SearchLotBySubCategoryId", mergeOption, idParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result5> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result5>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result5> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result5>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int TrySetUserRole(string userName, Nullable<int> roleId)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("roleId", roleId) :
                new ObjectParameter("roleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TrySetUserRole", userNameParameter, roleIdParameter);
        }
    
        public virtual int UnBanUser(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UnBanUser", idParameter);
        }
    
        public virtual int UnDeleteLot(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UnDeleteLot", idParameter);
        }
    
        public virtual int DeleteBookmark(Nullable<int> userid, Nullable<int> lotid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var lotidParameter = lotid.HasValue ?
                new ObjectParameter("lotid", lotid) :
                new ObjectParameter("lotid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteBookmark", useridParameter, lotidParameter);
        }
    }
}
